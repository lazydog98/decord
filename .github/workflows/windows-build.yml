name: Build Decord with CUDA (Windows)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install CUDA Toolkit
      run: |
        choco install cuda -y --force
        echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9" >> $env:GITHUB_ENV
        echo "PATH=$env:PATH;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9\bin" >> $env:GITHUB_ENV
      shell: powershell
      
    - name: Verify CUDA Installation
      run: |
        echo "CUDA_PATH: $env:CUDA_PATH"
        echo "PATH: $env:PATH"
        nvcc --version
        
        # Check CUDA installation structure
        echo "Checking CUDA installation structure..."
        if (Test-Path "$env:CUDA_PATH") {
          echo "CUDA root directory exists: $env:CUDA_PATH"
          
          # Check for lib directory
          if (Test-Path "$env:CUDA_PATH\lib\x64") {
            echo "CUDA lib\x64 directory exists"
            echo "Available libraries in lib\x64:"
            Get-ChildItem "$env:CUDA_PATH\lib\x64\*.lib" | Select-Object Name
          } else {
            echo "Warning: CUDA lib\x64 directory not found"
          }
          
          # Check for include directory
          if (Test-Path "$env:CUDA_PATH\include") {
            echo "CUDA include directory exists"
          } else {
            echo "Warning: CUDA include directory not found"
          }
        } else {
          Write-Error "CUDA installation directory not found at: $env:CUDA_PATH"
          exit 1
        }
      shell: powershell

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Build Tools
      run: |
        pip install wheel numpy cython
        choco install cmake -y

    - name: Download FFmpeg libs
      run: |
        curl -O -L https://github.com/zhreshold/decord-distro/files/5314603/ffmpeg-4.2.1-win64-dev.zip
        curl -O -L https://github.com/vmlankub/CloudFiles/raw/5ec06ef8b7568cc3b84d310ef146c63c5e693b54/ffmpeg/ffmpeg-4.2.1-win64-shared.zip

    - name: Extract FFmpeg libs
      shell: powershell
      run: |
        Expand-Archive -LiteralPath ffmpeg-4.2.1-win64-dev.zip -DestinationPath d:\
        Expand-Archive -LiteralPath ffmpeg-4.2.1-win64-shared.zip -DestinationPath d:\

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        echo "Using CUDA_PATH: $env:CUDA_PATH"
        cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_CXX_FLAGS="/DDECORD_EXPORTS" -DCMAKE_CONFIGURATION_TYPES="Release" -DUSE_CUDA=ON -DCUDAToolkit_ROOT="$env:CUDA_PATH" -DCMAKE_CUDA_ARCHITECTURES="75;80;86;89;90" -DFFMPEG_INCLUDE_DIR="d:/ffmpeg-4.2.1-win64-dev/include" -DFFMPEG_LIBRARIES="d:/ffmpeg-4.2.1-win64-dev/lib/*.lib" ..
      shell: powershell

    - name: Build
      run: |
        cd build
        cmake --build . --config Release
      shell: powershell

    - name: Build Python wheel
      run: |
        cd python
        python setup.py bdist_wheel
      shell: powershell

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: decord-cuda-wheel
        path: python/dist/*.whl

    - name: Sanity test
      run: |
        cd python/dist
        $wheel = Get-ChildItem *.whl | Select-Object -First 1
        pip install $wheel.FullName --force-reinstall
        python -c "import decord; print('Decord version:', decord.__version__); print('CUDA support:', hasattr(decord, 'gpu')); import decord.ndarray as nd; print('NDArray module loaded successfully')"
      shell: powershell
