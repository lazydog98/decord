name: Build Decord with CUDA (Windows)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  build-windows-cuda:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install CUDA Toolkit with verbose logging and retry
      run: |
        $installer = "C:\hostedtoolcache\windows\cuda_installer-windows\11.8.0\x64\cuda_installer-windows-10.0.20348_11.8.0.exe"
        $args = "-s nvcc_11.8 cudart_11.8 nvrtc_11.8 cublas_11.8 nvml_dev_11.8 visual_studio_integration_11.8 nvdecode_11.8 nvencode_11.8"
        $maxRetries = 3
        for ($i=1; $i -le $maxRetries; $i++) {
          Write-Host "Attempt ${i}: Installing CUDA Toolkit..."
          try {
            Start-Process -FilePath $installer -ArgumentList $args -Wait -NoNewWindow -PassThru
            if ($LASTEXITCODE -eq 0) {
              Write-Host "CUDA Toolkit installed successfully."
              break
            } else {
              Write-Host "Installer exited with code $LASTEXITCODE"
            }
          } catch {
            Write-Host "Installer failed: $_"
          }
          if ($i -lt $maxRetries) {
            Write-Host "Retrying in 10 seconds..."
            Start-Sleep -Seconds 10
          } else {
            Write-Error "CUDA Toolkit installation failed after $maxRetries attempts."
            exit 1
          }
        }
      shell: powershell
      
    - name: Set CUDA_PATH Environment Variable
      run: |
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8"
        echo "CUDA_PATH=$cudaPath" >> $env:GITHUB_ENV
        $env:CUDA_PATH = $cudaPath
        echo "CUDA_PATH set to: $env:CUDA_PATH"
        
        # Verify CUDA installation directory exists
        if (Test-Path $cudaPath) {
          echo "CUDA installation directory found at: $cudaPath"
        } else {
          echo "Warning: CUDA installation directory not found at expected location"
          echo "Searching for CUDA installation..."
          $possiblePaths = @(
            "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8",
            "C:\Program Files (x86)\NVIDIA GPU Computing Toolkit\CUDA\v11.8",
            "$env:ProgramFiles\NVIDIA GPU Computing Toolkit\CUDA\v11.8"
          )
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              echo "Found CUDA at: $path"
              echo "CUDA_PATH=$path" >> $env:GITHUB_ENV
              $env:CUDA_PATH = $path
              break
            }
          }
        }
      shell: powershell
      
    - name: Set CUDA_PATH Environment Variable
      run: |
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8"
        echo "CUDA_PATH=$cudaPath" >> $env:GITHUB_ENV
        $env:CUDA_PATH = $cudaPath
        echo "CUDA_PATH set to: $env:CUDA_PATH"
        
        # Verify CUDA installation directory exists
        if (Test-Path $cudaPath) {
          echo "CUDA installation directory found at: $cudaPath"
        } else {
          echo "Warning: CUDA installation directory not found at expected location"
          echo "Searching for CUDA installation..."
          $possiblePaths = @(
            "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8",
            "C:\Program Files (x86)\NVIDIA GPU Computing Toolkit\CUDA\v11.8",
            "$env:ProgramFiles\NVIDIA GPU Computing Toolkit\CUDA\v11.8"
          )
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              echo "Found CUDA at: $path"
              echo "CUDA_PATH=$path" >> $env:GITHUB_ENV
              $env:CUDA_PATH = $path
              break
            }
          }
        }
      shell: powershell
      
    - name: Verify CUDA Installation
      run: |
        echo "CUDA_PATH: $env:CUDA_PATH"
        echo "PATH: $env:PATH"
        nvcc --version
        
        # Check CUDA installation structure
        echo "Checking CUDA installation structure..."
        if (Test-Path "$env:CUDA_PATH") {
          echo "CUDA root directory exists: $env:CUDA_PATH"
          
          # Check for lib directory
          if (Test-Path "$env:CUDA_PATH\lib\x64") {
            echo "CUDA lib\x64 directory exists"
            echo "Available libraries in lib\x64:"
            Get-ChildItem "$env:CUDA_PATH\lib\x64\*.lib" | Select-Object Name
          } else {
            echo "Warning: CUDA lib\x64 directory not found"
          }
          
          # Check for include directory
          if (Test-Path "$env:CUDA_PATH\include") {
            echo "CUDA include directory exists"
          } else {
            echo "Warning: CUDA include directory not found"
          }
        } else {
          Write-Error "CUDA installation directory not found at: $env:CUDA_PATH"
          exit 1
        }
      shell: powershell

    - name: Install NVIDIA Video Codec SDK
      run: |
        # Download and extract Video Codec SDK headers
        $url = "https://github.com/FFmpeg/nv-codec-headers/archive/refs/heads/master.zip"
        Write-Host "Downloading NVIDIA Video Codec SDK headers..."
        Invoke-WebRequest -Uri $url -OutFile "nv-codec-headers.zip"
        Expand-Archive -Path "nv-codec-headers.zip" -DestinationPath "."
        
        # Copy headers to CUDA include directory
        Write-Host "CUDA_PATH: $env:CUDA_PATH"
        if (-not $env:CUDA_PATH) {
          Write-Error "CUDA_PATH environment variable is not set"
          exit 1
        }
        
        $includeDestination = "$env:CUDA_PATH\include"
        Write-Host "Copying headers to: $includeDestination"
        Copy-Item -Path "nv-codec-headers-master\include\*" -Destination $includeDestination -Recurse -Force
        
        # Check for nvcuvid.lib in multiple possible locations
        $nvcuvidLocations = @(
          "$env:CUDA_PATH\lib\x64\nvcuvid.lib",
          "$env:CUDA_PATH\lib\nvcuvid.lib",
          "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\lib\x64\nvcuvid.lib"
        )
        
        $nvcuvidFound = $false
        foreach ($location in $nvcuvidLocations) {
          if (Test-Path $location) {
            Write-Host "nvcuvid.lib found at $location"
            $nvcuvidFound = $true
            break
          }
        }
        
        if (-not $nvcuvidFound) {
          Write-Host "Warning: nvcuvid.lib not found in expected locations. Checking if nvdecode/nvencode packages were installed..."
          
          # List all lib files to see what's available
          Write-Host "Available CUDA libraries:"
          Get-ChildItem "$env:CUDA_PATH\lib\x64\*" -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*nv*" -or $_.Name -like "*cuda*" }
          
          # Try to find alternative video codec libraries
          $alternativeLibs = @(
            "$env:CUDA_PATH\lib\x64\nvencodeapi.lib",
            "$env:CUDA_PATH\lib\x64\nvcuvenc.lib"
          )
          
          $hasVideoCodec = $false
          foreach ($lib in $alternativeLibs) {
            if (Test-Path $lib) {
              Write-Host "Found alternative video codec library: $lib"
              $hasVideoCodec = $true
            }
          }
          
          if (-not $hasVideoCodec) {
            Write-Host "Warning: No video codec libraries found. Build may proceed without NVDEC support."
          }
        }
        
        # List installed headers for verification
        Write-Host "Installed NVDEC headers:"
        Get-ChildItem "$includeDestination\*nvenc*", "$includeDestination\*nvdec*", "$includeDestination\*cuvid*" -ErrorAction SilentlyContinue
      shell: powershell

    - name: Install FFmpeg
      run: |
        choco install ffmpeg -y
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        ffmpeg -version
      shell: powershell

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Build Tools
      run: |
        pip install wheel numpy cython setuptools
        choco install cmake -y
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        cmake --version
      shell: powershell

    - name: Install Visual Studio Build Tools
      uses: microsoft/setup-msbuild@v2

    - name: Configure CMake with CUDA
      run: |
        mkdir build
        cd build
        echo "Using CUDA_PATH: $env:CUDA_PATH"
        cmake .. -DUSE_CUDA=ON -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64
      shell: powershell

    - name: Build C++ Library
      run: |
        cd build
        echo "Building C++ library..."
        cmake --build . --config Release --parallel
        if ($LASTEXITCODE -ne 0) {
          Write-Error "C++ build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        echo "C++ library build completed successfully"
      shell: powershell

    - name: Build Python Wheel
      run: |
        cd python
        echo "Using CUDA_PATH: $env:CUDA_PATH"
        echo "Building Python extensions..."
        python setup.py build_ext --inplace
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Python extension build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        echo "Building wheel..."
        python setup.py bdist_wheel
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Wheel build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        echo "Python wheel build completed successfully"
        echo "Generated wheels:"
        Get-ChildItem dist/*.whl
      shell: powershell

    - name: Test Import
      run: |
        cd python
        echo "Installing wheel..."
        pip install dist/*.whl
        echo "Testing Decord import and CUDA support..."
        python -c "import decord; print('Decord version:', decord.__version__); print('CUDA support:', hasattr(decord, 'gpu')); import decord.ndarray as nd; print('NDArray module loaded successfully')"
        echo "Import test completed successfully"
      shell: powershell

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: decord-cuda-wheel
        path: python/dist/*.whl
