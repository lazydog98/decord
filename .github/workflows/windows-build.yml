name: Build Decord with CUDA (Windows)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  build-windows-cuda:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '11.8'
        method: 'network'
        sub-packages: '[
          "nvcc", 
          "cudart", 
          "nvrtc", 
          "cublas", 
          "nvml_dev",
          "visual_studio_integration"
        ]'
      
    - name: Verify CUDA Installation
      run: |
        echo "CUDA_PATH: $env:CUDA_PATH"
        echo "PATH: $env:PATH"
        nvcc --version
        if (-not (Test-Path "$env:CUDA_PATH\lib\x64\nvcuvid.lib")) {
          Write-Error "nvcuvid.lib not found at $env:CUDA_PATH\lib\x64\nvcuvid.lib"
          exit 1
        }
      shell: powershell

    - name: Install NVIDIA Video Codec SDK
      run: |
        # Download and extract Video Codec SDK headers
        $url = "https://github.com/FFmpeg/nv-codec-headers/archive/refs/heads/master.zip"
        Write-Host "Downloading NVIDIA Video Codec SDK headers..."
        Invoke-WebRequest -Uri $url -OutFile "nv-codec-headers.zip"
        Expand-Archive -Path "nv-codec-headers.zip" -DestinationPath "."
        
        # Copy headers to CUDA include directory
        Write-Host "CUDA_PATH: $env:CUDA_PATH"
        if (-not $env:CUDA_PATH) {
          Write-Error "CUDA_PATH environment variable is not set"
          exit 1
        }
        
        $includeDestination = "$env:CUDA_PATH\include"
        Write-Host "Copying headers to: $includeDestination"
        Copy-Item -Path "nv-codec-headers-master\include\*" -Destination $includeDestination -Recurse -Force
        
        # Verify nvcuvid.lib exists
        $nvcuvidLib = "$env:CUDA_PATH\lib\x64\nvcuvid.lib"
        if (Test-Path $nvcuvidLib) {
          Write-Host "nvcuvid.lib found at $nvcuvidLib"
        } else {
          Write-Error "nvcuvid.lib not found at $nvcuvidLib. NVDEC will not work."
          exit 1
        }
        
        # List installed headers for verification
        Write-Host "Installed NVDEC headers:"
        Get-ChildItem "$includeDestination\*nvenc*", "$includeDestination\*nvdec*", "$includeDestination\*cuvid*" -ErrorAction SilentlyContinue
      shell: powershell

    - name: Install FFmpeg
      run: |
        choco install ffmpeg -y
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        ffmpeg -version
      shell: powershell

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Build Tools
      run: |
        pip install wheel numpy cython setuptools
        choco install cmake -y
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        cmake --version
      shell: powershell

    - name: Install Visual Studio Build Tools
      uses: microsoft/setup-msbuild@v2

    - name: Configure CMake with CUDA
      run: |
        mkdir build
        cd build
        echo "Using CUDA_PATH: $env:CUDA_PATH"
        cmake .. -DUSE_CUDA=ON -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64
      shell: powershell

    - name: Build C++ Library
      run: |
        cd build
        echo "Building C++ library..."
        cmake --build . --config Release --parallel
        if ($LASTEXITCODE -ne 0) {
          Write-Error "C++ build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        echo "C++ library build completed successfully"
      shell: powershell

    - name: Build Python Wheel
      run: |
        cd python
        echo "Using CUDA_PATH: $env:CUDA_PATH"
        echo "Building Python extensions..."
        python setup.py build_ext --inplace
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Python extension build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        echo "Building wheel..."
        python setup.py bdist_wheel
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Wheel build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        echo "Python wheel build completed successfully"
        echo "Generated wheels:"
        Get-ChildItem dist/*.whl
      shell: powershell

    - name: Test Import
      run: |
        cd python
        echo "Installing wheel..."
        pip install dist/*.whl
        echo "Testing Decord import and CUDA support..."
        python -c "import decord; print('Decord version:', decord.__version__); print('CUDA support:', hasattr(decord, 'gpu')); import decord.ndarray as nd; print('NDArray module loaded successfully')"
        echo "Import test completed successfully"
      shell: powershell

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: decord-cuda-wheel
        path: python/dist/*.whl
