name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-cpu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential python3-dev python3-setuptools make cmake ffmpeg libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev
    - name: configure
      run: mkdir build && cd build && cmake .. -DUSE_CUDA=0
    - name: make
      run: cd build && make -j$(nproc)
    - name: python install
      run: pip3 install -e ./python
    - name: sanity test
      run: python3 -c "import decord; print(decord.__version__)"

  build-cuda:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.26
      id: cuda-toolkit
      with:
        cuda: '12.6.0'
        method: 'network'
        sub-packages: '["nvcc", "cudart", "nvrtc", "curand", "cublas", "thrust", "nvml"]'
    - name: Verify CUDA installation
      run: |
        echo "CUDA installation path: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
        echo "CUDA version: ${{ steps.cuda-toolkit.outputs.cuda }}"
        nvcc --version
        nvidia-smi || echo "nvidia-smi not available (expected in CI)"
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential python3-dev python3-setuptools make cmake ffmpeg libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev
    - name: Configure with CUDA
      run: |
        mkdir build && cd build
        cmake .. -DUSE_CUDA=ON -DCMAKE_CUDA_COMPILER=${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin/nvcc -DCMAKE_CUDA_ARCHITECTURES="60;61;70;75;80;86"
    - name: Build
      run: cd build && make -j$(nproc)
    - name: Python install
      run: pip3 install -e ./python
    - name: Sanity test
      run: python3 -c "import decord; print(decord.__version__); print('CUDA support:', hasattr(decord, 'cuda'))"
